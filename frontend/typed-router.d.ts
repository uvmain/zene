/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection ES6UnusedImports
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-resolver' {
  export type ParamParserCustom = never
}

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<
      '/',
      '/',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/[...all]': RouteRecordInfo<
      '/[...all]',
      '/:all(.*)',
      { all: ParamValue<true> },
      { all: ParamValue<false> },
      | never
    >,
    '/admin': RouteRecordInfo<
      '/admin',
      '/admin',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/albums/': RouteRecordInfo<
      '/albums/',
      '/albums',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/albums/[album]': RouteRecordInfo<
      '/albums/[album]',
      '/albums/:album',
      { album: ParamValue<true> },
      { album: ParamValue<false> },
      | never
    >,
    '/artists/': RouteRecordInfo<
      '/artists/',
      '/artists',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/artists/[artist]': RouteRecordInfo<
      '/artists/[artist]',
      '/artists/:artist',
      { artist: ParamValue<true> },
      { artist: ParamValue<false> },
      | never
    >,
    '/genres/': RouteRecordInfo<
      '/genres/',
      '/genres',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/genres/[genre]': RouteRecordInfo<
      '/genres/[genre]',
      '/genres/:genre',
      { genre: ParamValue<true> },
      { genre: ParamValue<false> },
      | never
    >,
    '/login': RouteRecordInfo<
      '/login',
      '/login',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/playlists/': RouteRecordInfo<
      '/playlists/',
      '/playlists',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/playlists/[playlist]': RouteRecordInfo<
      '/playlists/[playlist]',
      '/playlists/:playlist',
      { playlist: ParamValue<true> },
      { playlist: ParamValue<false> },
      | never
    >,
    '/podcasts/': RouteRecordInfo<
      '/podcasts/',
      '/podcasts',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/podcasts/[podcast]': RouteRecordInfo<
      '/podcasts/[podcast]',
      '/podcasts/:podcast',
      { podcast: ParamValue<true> },
      { podcast: ParamValue<false> },
      | never
    >,
    '/queue': RouteRecordInfo<
      '/queue',
      '/queue',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/radio': RouteRecordInfo<
      '/radio',
      '/radio',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/tracks/': RouteRecordInfo<
      '/tracks/',
      '/tracks',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/tracks/[track]': RouteRecordInfo<
      '/tracks/[track]',
      '/tracks/:track',
      { track: ParamValue<true> },
      { track: ParamValue<false> },
      | never
    >,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the \`sfc-typed-router\` Volar plugin to automatically type \`useRoute()\`.
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/index.vue': {
      routes:
        | '/'
      views:
        | never
    }
    'src/pages/[...all].vue': {
      routes:
        | '/[...all]'
      views:
        | never
    }
    'src/pages/admin.vue': {
      routes:
        | '/admin'
      views:
        | never
    }
    'src/pages/albums/index.vue': {
      routes:
        | '/albums/'
      views:
        | never
    }
    'src/pages/albums/[album].vue': {
      routes:
        | '/albums/[album]'
      views:
        | never
    }
    'src/pages/artists/index.vue': {
      routes:
        | '/artists/'
      views:
        | never
    }
    'src/pages/artists/[artist].vue': {
      routes:
        | '/artists/[artist]'
      views:
        | never
    }
    'src/pages/genres/index.vue': {
      routes:
        | '/genres/'
      views:
        | never
    }
    'src/pages/genres/[genre].vue': {
      routes:
        | '/genres/[genre]'
      views:
        | never
    }
    'src/pages/login.vue': {
      routes:
        | '/login'
      views:
        | never
    }
    'src/pages/playlists/index.vue': {
      routes:
        | '/playlists/'
      views:
        | never
    }
    'src/pages/playlists/[playlist].vue': {
      routes:
        | '/playlists/[playlist]'
      views:
        | never
    }
    'src/pages/podcasts/index.vue': {
      routes:
        | '/podcasts/'
      views:
        | never
    }
    'src/pages/podcasts/[podcast].vue': {
      routes:
        | '/podcasts/[podcast]'
      views:
        | never
    }
    'src/pages/queue.vue': {
      routes:
        | '/queue'
      views:
        | never
    }
    'src/pages/radio.vue': {
      routes:
        | '/radio'
      views:
        | never
    }
    'src/pages/tracks/index.vue': {
      routes:
        | '/tracks/'
      views:
        | never
    }
    'src/pages/tracks/[track].vue': {
      routes:
        | '/tracks/[track]'
      views:
        | never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the \`sfc-typed-router\` Volar plugin to automatically type \`useRoute()\`.
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
